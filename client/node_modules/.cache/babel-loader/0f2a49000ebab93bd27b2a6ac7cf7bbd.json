{"ast":null,"code":"var _jsxFileName = \"D:\\\\JsReactProjects\\\\my-todo-list\\\\client\\\\src\\\\components\\\\todo-list\\\\Todo-list-container.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { TodoList } from \"./Todo-list\";\nimport { requestTodoList, setNewTodo, deleteTodo } from \"../../store/todo-list/actions\";\nimport { setCurrentTodoList, setCurrentPage } from \"../../store/pagination/actions\";\n\nclass TodoListContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => this.props.requestTodoList();\n\n    this.todoList = () => {\n      const {\n        todoList,\n        term,\n        filter\n      } = this.props;\n\n      switch (filter) {\n        case \"Active\":\n          return todoList.filter(todo => {\n            if (!todo.done && term.trim()) {\n              return todo.label.toLowerCase().indexOf(term) !== -1;\n            } else return !todo.done;\n          });\n\n        case \"Done\":\n          return todoList.filter(todo => {\n            if (todo.done && term.trim()) {\n              return todo.label.toLowerCase().indexOf(term) !== -1;\n            } else return todo.done;\n          });\n\n        case \"Marked\":\n          return todoList.filter(todo => {\n            if (todo.important && term.trim()) {\n              return todo.label.toLowerCase().indexOf(term) !== -1;\n            } else return todo.important;\n          });\n\n        default:\n          return todoList.filter(todo => {\n            if (term.trim()) {\n              return todo.label.toLowerCase().indexOf(term) !== -1;\n            } else return todo;\n          });\n      }\n    };\n\n    this.currentTodoList = () => {\n      const todoList = this.todoList();\n      const indexOfLastTodo = this.props.currentPage * this.props.todoListPerPage;\n      const indexOfFirstTodo = indexOfLastTodo - this.props.todoListPerPage;\n      return todoList.slice(indexOfFirstTodo, indexOfLastTodo);\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.props.setCurrentTodoList(this.todoList());\n    if (this.props.filter === \"Done\" || this.props.filter === \"Active\" || this.props.filter === \"Marked\") this.props.setCurrentPage(1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(TodoList, {\n      todoList: this.currentTodoList(),\n      isEmpty: !this.props.todoList.length,\n      loader: this.props.loader,\n      alert: this.props.alertText.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    todoList: state.todoList.todoList,\n    filter: state.navigation.filter,\n    term: state.searchForm.term,\n    loader: state.loader.loader,\n    alertText: state.alertText.alertText,\n    currentPage: state.pagination.currentPage,\n    todoListPerPage: state.pagination.todoListPerPage\n  };\n};\n\nconst mapDispatchToProps = {\n  setNewTodo,\n  deleteTodo,\n  requestTodoList,\n  setCurrentTodoList,\n  setCurrentPage\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);","map":{"version":3,"sources":["D:/JsReactProjects/my-todo-list/client/src/components/todo-list/Todo-list-container.js"],"names":["React","Component","connect","TodoList","requestTodoList","setNewTodo","deleteTodo","setCurrentTodoList","setCurrentPage","TodoListContainer","componentDidMount","props","todoList","term","filter","todo","done","trim","label","toLowerCase","indexOf","important","currentTodoList","indexOfLastTodo","currentPage","todoListPerPage","indexOfFirstTodo","slice","componentDidUpdate","prevProps","prevState","snapshot","render","length","loader","alertText","mapStateToProps","state","navigation","searchForm","pagination","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {TodoList} from \"./Todo-list\";\r\nimport {requestTodoList, setNewTodo, deleteTodo} from \"../../store/todo-list/actions\";\r\nimport {setCurrentTodoList, setCurrentPage} from \"../../store/pagination/actions\";\r\n\r\nclass TodoListContainer extends Component {\r\n    componentDidMount = () => this.props.requestTodoList();\r\n\r\n    todoList = () => {\r\n        const {todoList, term, filter} = this.props;\r\n\r\n        switch (filter) {\r\n            case \"Active\":\r\n                return todoList.filter(todo => {\r\n                    if (!todo.done && term.trim()) {\r\n                        return todo.label.toLowerCase().indexOf(term) !== -1\r\n                    } else\r\n                        return !todo.done;\r\n                });\r\n            case \"Done\":\r\n                return todoList.filter(todo => {\r\n                    if (todo.done && term.trim()) {\r\n                        return todo.label.toLowerCase().indexOf(term) !== -1\r\n                    } else\r\n                        return todo.done;\r\n                });\r\n            case \"Marked\":\r\n                return todoList.filter(todo => {\r\n                    if (todo.important && term.trim()) {\r\n                        return todo.label.toLowerCase().indexOf(term) !== -1\r\n                    } else\r\n                        return todo.important;\r\n                });\r\n            default:\r\n                return todoList.filter(todo => {\r\n                    if (term.trim()) {\r\n                        return todo.label.toLowerCase().indexOf(term) !== -1\r\n                    } else\r\n                        return todo;\r\n                });\r\n        }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.props.setCurrentTodoList(this.todoList());\r\n        if (this.props.filter === \"Done\" || this.props.filter === \"Active\" || this.props.filter === \"Marked\") this.props.setCurrentPage(1);\r\n    }\r\n\r\n    currentTodoList = () => {\r\n        const todoList = this.todoList();\r\n        const indexOfLastTodo = this.props.currentPage * this.props.todoListPerPage;\r\n        const indexOfFirstTodo = indexOfLastTodo - this.props.todoListPerPage;\r\n        return  todoList.slice(indexOfFirstTodo, indexOfLastTodo);\r\n    };\r\n\r\n        render() {\r\n        return <TodoList\r\n            todoList={this.currentTodoList()}\r\n            isEmpty={!this.props.todoList.length}\r\n            loader={this.props.loader}\r\n            alert={this.props.alertText.length}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todoList: state.todoList.todoList,\r\n        filter: state.navigation.filter,\r\n        term: state.searchForm.term,\r\n        loader: state.loader.loader,\r\n        alertText: state.alertText.alertText,\r\n        currentPage: state.pagination.currentPage,\r\n        todoListPerPage: state.pagination.todoListPerPage\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    setNewTodo,\r\n    deleteTodo,\r\n    requestTodoList,\r\n    setCurrentTodoList,\r\n    setCurrentPage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);"]},"metadata":{},"sourceType":"module"}